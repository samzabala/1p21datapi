/*!
* 1point21 Data Vizualiser Version 1.2.1
* Render Styles
* DO NOT EDIT THIS CSS FILE
* Edit its corresponding scss file in the src/ folder instead
*/
$prefix: '.dv';
$color-bg: #EEE;
$color-base: #222;
$color-neutral: #888;
$color-white: #FFF;
$color-neutral-light: #BBB;
$color-neutral-dark: #666;
$color-neutral-darker: #444;

$palette: $color-base,$color-neutral-darker,$color-neutral-dark,$color-neutral,$color-neutral-light;

// $color-base: #444;


//mixin
@function _abs($number) {

	@if $number >= 0 {
		@return $number;
	}
	@return -1*$number;
	
}

// square root function using the Babylonian method
// http://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method
@function sqrt($square, $tolerance: .001, $estimate: $square/2) {
	
	@if _abs($square - $estimate*$estimate) < $tolerance {
		@return $estimate;
	}
	
	@return sqrt($square, $tolerance, ($estimate + $square/$estimate)/2);
	
}

#{$prefix} {
	background: $color-bg;
	position:relative;
	// text-align: center;
	padding: 2.5em 1em 1em;
	margin-bottom: 1em;
	color: $color-base;

	&#{$prefix}-initialized,
	&.no-data{
		padding-top: 1em;
	}

	&-svg {
		width:100%!important;
		max-width:100%;
		height:auto;
	}

	&-dark {

		fill: currentColor;
	}

	&-light {
		fill: $color-white
	}

	// * { outline: 1px solid red!important}

	&-align {
		&-center{
			text-align: center;
		}

		&-left{
			text-align: left;
		}

		&-right{
			text-align: right;
		}
	}

	&-title,&-description {
		display: block;
	}

	&-title {
		font-size: 1.25em;
		margin:0;
		font-weight: 700;
		line-height:1.25;
	}
	
	&-description {
		opacity: .8;
		font-size: .875em;
		line-height:1.5;
	}

	&-container {

		
		&:before { 
			content:"Loading...";
			position: absolute;
			margin: auto;
			top:50%;
			left: 50%;
			transform: translate(-50%,-50%);
			opacity:0;
			transition: .25s opacity linear;
		}
		
		&.fatality {
			padding: 4em 0;
			max-width: 28em;
			font-size: .875em;
			text-align: center;
			margin: 0 auto;
		}
		@at-root #{$prefix}:not(#{$prefix}-initialized):not(.no-data),
		&:empty {
			padding-bottom: 75%;
			&:before { 
				opacity:1;
			}
		}
	}

	text {
		font-family: inherit!important;
	}

	// &-rulers,
	// &-grid,
	// &-labels{
	// 	color: $color-base;

	// 	> g {
	// 		// fill-opacity:.5;
	// 	}

	// 	#{$prefix}-dark & {
	// 		color: $color-bg;
	// 	}
	// }

	&-grid {
		
		line,path {
			stroke-opacity: .25;
		}

		.tick-aligned {
			line,path {
				stroke-opacity: .5;
			}
		}
	}
	
	&-fill#{$prefix}-no-color,
	&-no-palette &-graph-item-shape,
	&-no-palette &-legend-item-shape {
		fill: $color-base;
	}
	
	&-line.no-color {
		stroke: $color-base;

		#{$prefix}-dark & {
			stroke: $color-white;
		}
	}
	
	&-fill.no-color {
		fill-opacity: .25;
	}

	@for $i from 2 through length($palette) {


		&-no-palette#{$prefix}-base-bar,
		&-no-palette#{$prefix}-base-pie,
		&-no-palette#{$prefix}-has-legend {

			#{$prefix}-graph-item-shape:nth-of-base(#{$i}n),
			#{$prefix}-legend-item:nth-of-base(#{$i}n) #{$prefix}-legend-item-shape {
				fill: nth($palette,$i);

			}
		}

		&-no-palette#{$prefix}-base-pie#{$prefix}-pi-label-style-within #{$prefix}-graph-item-text, 
		&-no-palette#{$prefix}-has-legend#{$prefix}-base-scatter #{$prefix}-graph-item-shape {
			&:nth-of-base(#{$i}n) {
				stroke: nth($palette,$i);
			}
		}
			
	}

	&-graph-item-text,
	&-legend-item-text,
	&-legend-item-shape {
		paint-order: stroke;
		stroke-linejoin: round;
	}

	&-graph-item-text,
	&-legend-item-text,
	&-legend-item-shape {
		stroke-width: 4;
	}

	&-base-pie#{$prefix}-pi-label-style-linked &-graph-item-text,
	&-base-pie#{$prefix}-pi-label-style-within &-graph-item-text {
		stroke-width: 6;
	}


	// &-base-line .graph-item-text,
	// &-base-pie#{$prefix}-pi-label-style-linked .graph-item-text,
	// & .legend-item-shape {
	// 	stroke: $color-bg;
	// }


	&-legend-item-text,
	&-graph &-graph-item-text {
		fill: $color-base;
	}

	&-dark {
		#{$prefix}-legend-item-text,
		&-graph #{$prefix}-graph-item-text {
			fill: $color-white;
		}
}

	&-graph-item {

		&-link,
		&-text {
			pointer-events:none;
		}

		&-link {
			stroke: $color-base;

			#{$prefix}-dark & {
				stroke: $color-white;
			}
		}
		
		&-text {
			&.dark {
				fill: $color-base;
			}

			&.light {
				fill: $color-white;
			}
		}

		
	}

	&-cursor-stalker {
		fill-opacity:0!important;
		stroke-opacity:0!important;
	}

	&-tooltip {
		background: $color-bg;
		font: inherit;
		font-size: 1rem;
		line-height: 1.5;
		padding: 1.5em;
		border-radius: .5em;
		border:1px solid rgba($color-base,.1);
		box-shadow: 0 5px 5px rgba($color-base,.1);
		z-index:999999;
		max-width: 80vw!important;
		pointer-events:none!important;
		transition:
			.0625s top ease-out,
			.0625s left ease-out,
			.0625s opacity ease-out
			;

		&:after {
			content:"";
			background: $color-bg;
			display:block;
			width: 1.5rem;
			height: 1.5rem;
			z-index: -1;
			position:absolute;
			margin:auto;
			border-right: 1px solid rgba($color-base,.1);
			border-bottom: 1px solid rgba($color-base,.1);
		}

		&.n {
			margin-top: calc( #{sqrt((1.5 * 2)) * -.5rem} - 10px );
			&:after {
				bottom: -.75rem;
				right:0;
				left:0;
				transform: rotate(45deg);
			}
		}

		&.w {
			margin-left: calc( #{sqrt((1.5 * 2)) * -.5rem} - 2px );
			&:after {
				right: -.75rem;
				top:0;
				bottom:0;
				transform: rotate(-45deg);
			}
		}

		&.s {
			margin-top: calc( #{sqrt((1.5 * 2)) * .5rem} - 2px );
			&:after {
				top: -.75rem;
				right:0;
				left:0;
				transform: rotate(-135deg);
			}
		}

		&.e {
			margin-left: calc( #{sqrt((1.5 * 2)) * .5rem} - 2px );

			&:after {
				left: -.75rem;
				top:0;
				bottom:0;
				transform: rotate(135deg);
			}
		}

		&-data {

			&-property {
				&:nth-child(n + 2) {
					margin-top: .5em;
				}
			}
		}
		
	}

	@media only screen and (max-width: 700px){
		padding: .25em;
	}

}